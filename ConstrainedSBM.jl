using Convex
# using Mosek
using SCS
using ECOS
using Random
using LinearAlgebra
using LightGraphs
using SimpleWeightedGraphs
using Discreet
using StatsBase

struct Data
    n::Int
    d::Int
    k::Int
    A::Array{Int}
    G::SimpleWeightedGraph
    degree::Array{Int}
end

mutable struct Solution
    ll::Float64
    data::Data
    y::Array{Int}
    z::Array{Int}
    m::Array{Int}
    kappa::Array{Int}
end

function Data(n, d, k, A, G)
    degree = [ sum(A[i,:]) for i=1:n ]
    return Data(n, d, k, A, G, degree)
end

function compute_m(data, y)
    A = data.A
    m = zeros(Int, data.k, data.k)
    for i=1:data.n
        m[ y[i], y[i] ] += A[i,i]
        for j=(i+1):data.n
            m[ y[i], y[j] ] += A[i,j]
            m[ y[j], y[i] ] += A[j,i]
        end
    end
    return m
end

function compute_kappa(data, y)
    G = data.G
    k = data.k
    kappa = zeros(Int, k)
    for i = 1:data.n
        kappa[ y[i] ] += data.degree[i]
    end
    return kappa
end

function Solution(data, y)
    z = zeros(Int, data.n, data.k)
    m = compute_m(data, y)
    kappa = compute_kappa(data, y)

    for i = 1:data.n
        z[i, y[i]] = 1
    end
    
    ll = 0.
    if is_assortative(m, kappa)
        println("***************** Assortative = YES")
        for r = 1:data.k
            for s = r:data.k
                ratio = m[r,s]/(kappa[r] * kappa[s])
                if ratio < 1e-6
                    ratio = 1e-10
                end
                contrib = m[r,s] * log(ratio)
                ll -= contrib
                if r != s
                    ll -= contrib
                end
            end
        end
        ll = 0.5*ll - C
    else
        println("***************** Assortative = NO")
        ll = solveSBM(m, kappa, data)
    end
    return Solution(ll, data, y, z, m, kappa)
end

function solveSBM(m_, kappa_, data)
    n = data.n
    k = data.k
    A = data.A
    m = m_
    kap = zeros(Float64, k, k)
    
    # for r=1:k
    #     for s=r:k
    #         if m_[r,s] == 0 || kappa_[r] == 0
    #             return Inf
    #         end
    #     end
    # end

    for r=1:k
        for s=r:k
            kap[r,s] = (kappa_[r]*kappa_[s])/(2*M)
            kap[s,r] = kap[r,s]
        end
    end

    # SBM parameters
    w = Variable(k, k)

    # Objective
    f  = 0.5*sum( ( m[r,r]*log(w[r,r]) - w[r,r]*kap[r,r] ) for r=1:k )
    f += sum( ( m[r,s]*log(w[r,s]) - w[r,s]*kap[r,s] ) for r=1:k for s=(r+1):k )

    problem = maximize(f)

    # Model constraints
    for r = 1:k
        for s = r:k
            problem.constraints += [ w[r,s] >= Tol ]
            if r != s
                problem.constraints += [ w[r,s] == w[s,r] ]
            end
        end
    end

    for q = 1:k
        for r = 1:k
            for s = (r+1):k
                problem.constraints += [ w[q,q] >= (w[r,s] + Tol) ]
            end
        end
    end

    solve!(problem, ECOSSolver(verbose = false))
    # println("Optval = ", -problem.optval)
    # println("Omega = ", w.value)
    return -problem.optval
end

function evalrelocate(sol, i, t)
    # source cluster
    src = sol.y[i]

    m_ = copy(sol.m)

    # for v in neighbors(sol.data.G, i)
    #     m_[sol.y[v], src] -= Int(sol.data.G.weights[i, v])
    #     m_[src, sol.y[v]] -= Int(sol.data.G.weights[i, v])
    #     if i == v
    #         m_[t, t] += Int(2*sol.data.G.weights[i, i])
    #     else
    #         m_[t, sol.y[v]] += Int(sol.data.G.weights[i, v])
    #         m_[sol.y[v], t] += Int(sol.data.G.weights[i, v])
    #     end
    # end

    for v in neighbors(sol.data.G, i)
        e = Int(sol.data.G.weights[i, v])
        if i == v
            m_[src, src] -= e
            m_[t, t] += e
        else
            m_[sol.y[v], src] -= e
            m_[src, sol.y[v]] -= e
            m_[t, sol.y[v]] += e
            m_[sol.y[v], t] += e
        end
    end

    sbm_cost = 0.

    kappa_ = copy(sol.kappa)
    kappa_[ src ] -= sol.data.degree[i]
    kappa_[ t ] += sol.data.degree[i]

    for r = 1:sol.data.k
        for s = r:sol.data.k
            ratio = m_[r,s]/(kappa_[r] * kappa_[s])
            if ratio < 1e-6
                ratio = 1e-10
            end
            contrib = m_[r,s] * log(ratio)
            sbm_cost -= contrib
            if r != s
                sbm_cost -= contrib
            end
        end
    end
    sbm_cost = 0.5*sbm_cost - C
    
    if sbm_cost < sol.ll
        if is_assortative(m_, kappa_)
            # update likelihood
            sol.ll = sbm_cost
            # update parameters
            sol.m = copy(m_)
            # update assignments
            sol.z[i, src] = 0
            sol.z[i, t] = 1
            sol.y[i] = t
            sol.kappa = copy(kappa_)
            # println("--relocate ", i, " ", t)
        else
            y_ = copy(sol.y)
            z_ = copy(sol.z)
            y_[i] = t
            z_[i, src] = 0
            z_[i, t] = 1
            sbm_cost = solveSBM(m_, kappa_, sol.data)
            if sbm_cost < (sol.ll + Tol)
                # update likelihood
                sol.ll = sbm_cost
                # update parameters
                sol.m = copy(m_)
                # update assignments
                sol.y[i] = t
                sol.z[i, src] = 0
                sol.z[i, t] = 1
                sol.kappa = copy(kappa_)
                # println("------------Relocate after SOLVE_SBM ", i, " ", t)
            end
        end
    end
end

function localsearch(sol)
    n = sol.data.n
    k = sol.data.k
    tw = MersenneTwister(1234)
    prev_ll = Inf
    curr_ll = sol.ll
    it_changed = true
    counter = 0
    
    while ((prev_ll - curr_ll) > Tol) && it_changed
        rdm_samples = randperm(tw, n)
        it_changed = false
        for i in rdm_samples
            prev = sol.y[i]
            rdm_clusters = randperm(tw, k)
            for c in rdm_clusters
                if (sol.y[i] != c) && (prev != c)
                    evalrelocate(sol, i, c)
                end
                if sol.ll < (curr_ll - Tol)
                    prev_ll = curr_ll
                    curr_ll = sol.ll
                    it_changed = true
                end
            end
        end
        counter += 1
    end
    println(counter)
end

function likelihood(sol)
    ll = 0.
    for r = 1:sol.data.k
        for s = r:sol.data.k
            den = sol.kappa[r] * sol.kappa[s]
            ratio = sol.m[r,s]/den
            if ratio < 1e-6
                ratio = 1e-10
            end
            contrib = sol.m[r,s] * log(ratio)
            ll -= contrib
            if r != s
                ll -= contrib
            end
        end
    end
    ll = 0.5*ll - C
    return ll
end

function get_omega(m, kappa)
    k = length(kappa)
    w = [ 2.0*M*(m[r, s])/(kappa[r] * kappa[s]) for r=1:k, s=1:k ]
    return w
end

function is_assortative(m, kappa)
    if CONSTRAINED
        return is_strongly_assortative(m, kappa)
    end
    return true
end

function is_strongly_assortative(m, kappa)
    w = get_omega(m, kappa)
    if minimum(diag(w)) > maximum(w - Diagonal(w))
        return true
    end
    return false
end

function is_weakly_assortative(m, kappa)
    k = length(kappa)
    w = get_omega(m, kappa)
    for r = 1:k
        for s = 1:k
            if r != s && w[r,r] <= w[r,s]
                return false
            end
        end
    end
    return true
end

function run()
    n = data.n
    k = data.k
    A = data.A
    max_it = 10
    best_nmi = 0.0
    best_ll = Inf
    best_w = zeros(Float64, k, k)
    best_m = zeros(Int, k, k)
    best_y = zeros(Int, n)
    best_z = zeros(Int, n, k)
    best_kappa = zeros(Int, k)

    for i=1:max_it
        # create initial solution
        y = sample(1:k, n)
        m = compute_m(data, y)
        kappa = compute_kappa(data, y)
        # while !is_assortative(m, kappa)
        #     y = sample(1:k, n)
        #     m = compute_m(data, y)
        #     kappa = compute_kappa(data, y)
        # end
        sol = Solution(data, y)
        ll_initial = sol.ll
        # println(ll_initial)
        localsearch(sol)
        nmi = mutual_information(sol.y, label; normalize = true)
        w = get_omega(sol.m, sol.kappa)
        println("Likelihood (", i, "): ", ll_initial, " >> ", sol.ll)
        println("NMI: ", nmi)

        omega_ii = diag(w)
        omega_ij = w - Diagonal(w)
        for c=1:k
            println("w[", c, "]: ", omega_ii[c], ", ", maximum(omega_ij[c,:]))
        end
        
        if sol.ll < best_ll
            best_ll = sol.ll
            best_nmi = nmi
            best_w = copy(w)
            best_m = copy(sol.m)
            best_y = copy(sol.y)
            best_z = copy(sol.z)
            best_kappa = copy(sol.kappa)
        end
        # println("y  = ", sol.y)
    end
    omega_ii = diag(best_w)
    omega_ij = best_w - Diagonal(best_w)
    for i=1:k
        println(omega_ii[i], ", ", maximum(omega_ij[i,:]))
    end
    for i=1:k
        print(sum(best_z[:,i]), " ")
    end
    yB = []
    for i=1:n
        if data.degree[i] != 0
            push!(yB, best_y[i])
        end
    end
    nmiB = mutual_information(yB, labelB; normalize = true)
    println("\nminimum: ", best_ll, " ", best_nmi, " ", nmiB)
    println("best_m = ", best_m)
    println("best_kappa = ", best_kappa)
    println(best_y)
end


### MAIN

CONSTRAINED = true

INSTANCE = "Cortex2"

EDGES_FILE = "data/" * INSTANCE * ".link"
LABEL_FILE = "data/" * INSTANCE * ".label"

# tolerance epsilon
Tol = 1e-4

# data dimensionality
d = 8

nb_pairs = countlines(EDGES_FILE)

# label = zeros(Int, n)
label = Int[]

open(LABEL_FILE) do file
    for ln in eachline(file)
        push!(label, parse(Int, ln))
    end
end

# number of nodes
n = length(label)

# number of clusters
k = length(unique(collect(label)))

# graph (adjacency matrix)
A = zeros(Int, n, n)

G = SimpleWeightedGraph(n)

open(EDGES_FILE) do file
    for ln in eachline(file)
        lnsplit = split(ln, " ")
        a = parse(Int, lnsplit[1])
        b = parse(Int, lnsplit[2])
        e = parse(Int, lnsplit[3])
        A[a, b] = e
        A[b, a] = e
        add_edge!(G, a, b, e)
    end
end

data = Data(n, d, k, A, G)

# total number of edges
M = .5*sum(A)

# SBM constant
C = M*(log(2*M) - 1)

# (k_i k_j)/2M constant matrix
Q = (data.degree * transpose(data.degree))/(2*M)

labelB = []
for i=1:n
    if data.degree[i] != 0
        push!(labelB, label[i])
    end
end

run()


# a = zeros(Int, n)
# for i=1:n
#     if i%2 == 0
#         a[i] = 1
#     else
#         a[i] = 2
#     end
# end

ground_truth = Solution(data, copy(label))
omega = get_omega(ground_truth.m, ground_truth.kappa)
omega_ii = diag(omega)
omega_ij = omega - Diagonal(omega)
for i=1:k
    println(omega_ii[i], ", ", maximum(omega_ij[i,:]))
end
println("ll = ", likelihood(ground_truth))
# println("degree: ", data.degree)

# y1 = [11, 2, 13, 7, 9, 1, 10, 6, 6, 10, 7, 6, 1, 2, 5, 1, 10, 13, 5, 13, 13, 4, 11, 3, 1, 5, 1, 4, 13, 5, 7, 9, 4, 2, 5, 8, 2, 10, 3, 13, 8, 2, 6, 4, 13, 6, 4, 4, 13, 4, 10, 13, 1, 6, 11, 2, 12, 2, 3, 4, 8, 9, 12, 10, 12, 13, 3, 10, 8, 2, 7, 4, 12, 10, 9, 9, 7, 4, 8, 9, 9, 2, 2, 7, 2, 7, 6, 12, 5, 7, 1, 3, 4, 2, 6, 1, 5, 5, 1, 1, 13, 11, 8, 6, 9, 4, 1, 12, 12, 1, 9, 12, 13, 4, 9, 11, 13, 13, 13, 5, 10, 1, 11, 9, 9, 2, 1, 12, 10, 3, 8, 11, 13, 1, 1, 9, 8, 8, 2, 8, 9, 2, 5, 6, 5, 10, 6, 5, 2, 3, 5, 12, 7, 11, 1, 5, 7, 13, 3, 12, 7, 12, 2, 9, 9, 2, 5, 7, 12, 7, 1, 9, 12, 4, 12, 12, 1, 13, 4, 6, 3, 5, 10, 6, 6, 10, 4, 3, 3, 8, 11, 3, 5, 6, 1, 5, 2, 11, 2, 7, 7, 2, 3, 2, 5, 11, 8, 10, 5, 5, 6, 2, 6, 2, 5, 11, 11, 11, 9, 11, 5, 1, 13, 7, 7, 2, 1, 9, 8, 2, 4, 7, 11, 13, 1, 8, 11, 9, 1, 4, 6, 4, 11, 13, 13, 13, 9, 5, 2, 13, 9, 2, 1, 4, 6, 9, 11, 6, 13, 1, 6, 10, 10, 6, 6, 8, 2, 10, 8, 13, 13, 10, 5, 6, 4, 5, 6, 3, 9, 12, 13, 4, 10, 3, 3, 2, 5, 12, 4, 6, 11, 13, 1, 9, 2, 10, 5, 8, 9, 7, 13, 9, 11, 3, 11, 1, 4, 11, 2, 11, 11, 2, 10, 8, 9, 4, 10, 1, 1, 10, 6, 2, 11, 9, 8, 13, 4, 9, 5, 3, 8, 8, 10, 3, 6, 6, 9, 7, 13, 1, 10, 9, 6, 11, 12, 5, 6, 2, 1, 9, 13, 8, 12, 7, 13, 9, 9, 1, 5, 11, 12, 2, 10, 8, 3, 7, 12, 12, 9, 1, 5, 9, 8, 9, 10, 2, 9, 9, 2, 5, 8, 12, 1, 4, 5, 8, 11, 7, 9, 8, 10, 7, 10, 6, 8, 8, 9, 9, 9, 9, 7, 11, 9, 10, 9, 12, 10, 10, 12, 9, 13, 9, 13, 2, 9, 13, 8, 8, 3, 11, 13, 5, 5, 11, 3, 7, 3, 10, 3, 9, 4, 3, 1, 6, 12, 2, 12, 1, 7, 5, 10, 13, 8, 12, 13, 1, 4, 12, 9, 1, 7, 7, 3, 7, 6, 6, 7, 1, 5, 5, 10, 9, 3, 2, 13, 1, 1, 3, 12, 12, 4, 7, 12, 4, 11, 3, 7, 1, 13, 2, 12, 6, 7, 3, 6, 2, 11, 5, 8, 3, 10, 8, 10, 1, 11, 2, 5, 2, 11, 3, 5, 13, 6, 3, 2, 13, 9, 12, 8, 6, 8, 9, 2, 11, 10, 3, 8, 6, 11, 10, 6, 13, 8, 10, 1, 5, 5, 9, 12, 8, 6, 12, 7, 1, 8, 13, 7, 10, 10, 1, 4, 4, 5, 5, 9, 4, 5, 12, 9, 13, 9, 10, 2, 11, 13, 5, 6, 5, 7, 6, 1, 9, 6, 11, 7, 6, 8, 5, 1, 5, 13, 11, 13, 8, 9, 4, 12, 8, 4, 9, 6, 10, 3, 13, 4, 5, 1, 8, 9, 9, 4, 12, 3, 8, 11, 12, 13, 6, 11, 11, 13, 9, 9, 7, 4, 10, 2, 8, 6, 7, 8, 4, 12, 5, 10, 3, 5, 5, 11, 10, 12, 9, 8, 1, 1, 4, 9, 3, 7, 2, 4, 10, 11, 1, 2, 2, 10, 11, 13, 6, 9, 2, 11, 6, 3, 2, 10, 4, 4, 12, 2, 11, 11, 11, 3, 12, 11, 11, 13, 2, 11, 4, 12, 13, 5, 1, 3, 8, 10, 12, 13, 4, 3, 10, 4, 3, 12, 10, 11, 9, 8, 5, 10, 11, 3, 5, 4, 12, 6, 4, 7, 11, 1, 4, 7, 2, 8, 12, 1, 4, 12, 1, 1, 13, 2, 2, 9, 1, 5, 4, 3, 9, 4, 3, 13, 12, 10, 5, 7, 11, 7, 10, 1, 12, 12, 4, 5, 2, 10, 3, 12, 5, 13, 5, 13, 5, 10, 12, 12, 3, 8, 3, 9, 1, 12, 6, 6, 12, 8, 9, 2, 10, 2, 8, 6, 11, 3, 7, 9, 3, 10, 5, 9, 7, 1, 9, 6, 6, 3, 10, 3, 1, 7, 11, 13, 7, 6, 10, 13, 2, 4, 9, 7, 3, 13, 2, 9, 5, 3, 10, 2, 6, 9, 13, 8, 5, 8, 11, 10, 5, 13, 6, 9, 8, 9, 9, 9, 8, 4, 1, 13, 8, 1, 13, 9, 9, 2, 8, 12, 8, 3, 7, 6, 11, 1, 12, 11, 6, 3, 7, 1, 8, 13, 9, 10, 9, 9, 7, 12, 1, 9, 12, 2, 6, 3, 1, 7, 10, 5, 2, 7, 11, 12, 6, 1, 4, 9, 2, 5, 5, 4, 11, 13, 2, 12, 4, 4, 6, 7, 9, 7, 9, 11, 2, 5, 2, 9, 10, 5, 10, 10, 2, 7, 2, 7, 6, 3, 8, 9, 12, 10, 9, 8, 3, 3, 9, 13, 11, 6, 6, 3, 2, 4, 1, 11, 6, 9, 2, 3, 10, 11, 3, 3, 4, 8, 11, 4, 12, 8, 9, 7, 11, 2, 6, 5, 9, 3, 10, 12, 11, 11, 10, 8, 4, 13, 2, 4, 10, 2, 9, 7, 6, 4, 12, 12, 11, 8, 9, 11, 7, 6, 12, 5, 12, 7, 9, 6, 12, 10, 11, 4, 8, 6, 5, 11, 9, 9, 12, 10, 7, 2, 2, 10, 9, 12, 1, 10, 4, 3, 9, 12, 3, 12, 3, 12, 6, 11, 9, 7, 6, 11, 11, 7, 10, 5, 4, 1, 12, 10, 2, 6, 8, 6, 5, 7, 8, 13, 6, 9, 9, 3, 9, 11, 3, 6, 9, 5, 6, 6, 9, 13, 12, 1, 11, 3, 2, 9, 13, 8, 8, 12, 5, 1, 12, 7, 10, 2, 10, 10, 4, 2, 11, 1, 11, 4, 4, 1, 4, 12, 1, 3, 12, 10, 8, 6, 3, 1, 3, 1, 4, 8, 5, 6, 2, 11, 13, 2, 5, 10, 6, 8, 3, 13, 2, 12, 7, 1, 7, 9, 12, 2, 1, 7, 2, 9, 10, 7, 2, 8, 2, 1, 6, 9, 8, 11, 11, 7, 5, 7, 9, 6, 6, 2, 7, 10, 2, 7, 12, 4, 2, 9, 1, 7, 7, 4, 6, 10, 6, 13, 6, 3, 5, 13, 1, 8, 7, 3, 4, 1, 9, 11, 8, 5, 12, 12, 5, 11, 5, 4, 10, 3, 12, 10, 12, 13, 13, 1, 10, 4, 13, 8, 1, 5, 2, 3, 6, 13, 2, 3, 10, 4, 8, 5, 11, 7, 10, 9, 8, 2, 6, 12, 9, 6, 12, 2, 7, 3, 9, 11, 11, 4, 4, 5, 9, 10, 12, 7, 4, 4, 8, 3, 10, 12, 11, 11, 12, 12, 4, 6, 7, 2, 11, 5, 7, 5, 4, 8, 2, 11, 13, 2, 9, 11, 5, 13, 4, 8, 12, 6, 6, 10, 7, 7, 11, 5, 13, 2, 13, 10, 11, 2, 1, 8, 5, 13, 6, 3, 6, 13, 7, 8, 13, 10, 13, 10, 10, 11, 2, 4, 4, 4, 3, 7, 13, 3, 9, 8, 2, 5, 6, 2, 9, 3, 3, 11, 11, 13, 6, 1, 4, 12, 8, 12, 5, 2, 9, 9, 12, 8, 5, 9, 6, 3, 7, 11, 8, 9, 5, 9, 6, 5, 11, 1, 7, 1, 10, 5, 10, 5, 2, 2, 3, 7, 2, 13, 6, 5, 12, 8, 11, 6, 12, 3, 7, 3, 13, 9, 3, 5, 4, 7, 10, 10, 6, 9, 3, 8, 3, 13, 8, 12, 3, 9, 11, 2, 12, 3, 9, 10, 3, 6, 13, 10, 3, 5, 11, 4, 11, 9, 5, 2, 5, 10, 12, 13, 1, 11, 8, 6, 3, 9, 13, 2, 10, 3, 4, 10, 2, 9, 10, 8, 5, 7, 9, 6, 6, 6, 10, 9, 5, 5, 5, 12, 11, 6, 5, 12, 13, 1, 3, 10, 9, 3, 4, 3, 9, 12, 4, 1, 4, 8, 6, 3, 8, 5, 4, 3, 13, 7, 1, 8, 10, 4, 1, 10, 6, 2, 7, 3, 4, 6, 10, 10, 13, 3, 3, 7, 1, 11, 9, 9, 11, 10, 12, 12, 11, 4, 7, 2, 1, 11, 11, 3, 11, 6, 2, 8, 13, 10, 7, 1, 6, 6, 12, 3, 11, 5, 11, 7, 13, 5, 6, 3, 9, 1, 5, 3, 10, 8, 1, 12, 5, 2, 10, 5, 1, 8, 10, 11, 4, 8, 2, 10, 7, 8, 6, 8, 6, 6, 6, 13, 6, 8, 3, 2, 7, 10, 5, 12, 8, 7, 8, 11, 10, 7, 1, 12, 4, 8, 2, 11, 2, 13, 11, 3, 1, 4, 3, 8, 7, 5, 13, 1, 10, 2, 9, 12, 4, 1, 1, 3, 12, 3, 10, 6, 12, 1, 13, 9, 4, 4, 8, 3, 1, 9, 2, 12, 9, 12, 10, 7, 3, 8, 2, 1, 9, 4, 12, 5, 1, 11, 6, 5, 8, 13, 8, 9, 2, 10, 13, 1, 12, 10, 7, 10, 13, 6, 10, 7, 10, 5, 9, 2, 3, 9, 7, 3, 5, 6, 6, 6, 4, 6, 1, 2, 4, 13, 2, 7, 4, 6, 10, 9, 7, 5, 7, 2, 8, 9, 7, 8, 5, 6, 10, 10, 1, 6, 3, 3, 7, 12, 1, 4, 9, 5, 1, 13, 3, 11, 10, 10, 4, 12, 3, 12, 12, 6, 13, 8, 9, 13, 12, 4, 3, 5, 8, 9, 6, 9, 2, 9, 11, 12, 13, 1, 12, 2, 4, 5, 2, 11, 6, 1, 2, 9, 7, 12, 9, 11, 5, 11, 11, 1, 8, 3, 5, 4, 5, 9, 2, 9, 6, 2, 1, 12, 9, 4, 5, 13, 4, 13, 13, 12, 3, 4, 5, 1, 13, 2, 4, 9, 4, 1, 6, 11, 5, 12, 10, 8, 4, 2, 7, 5, 2, 10, 5, 6, 8, 7, 12, 11, 3, 3, 5, 1, 12, 1, 13, 6, 4, 5, 1, 11, 4, 5, 11, 13, 8, 13, 5, 10, 11, 3, 6, 13, 11, 10, 12, 13, 5, 4, 10, 6, 11, 2, 1, 4, 8, 4, 2, 7, 5, 11, 9, 5, 10, 9, 13, 13, 4, 7, 5, 8, 5, 12, 3, 11, 1, 7, 7, 13, 5, 8, 3, 2, 5, 2, 12, 8, 1, 8, 10, 5, 13, 12, 13, 13, 12, 9, 12, 1, 10, 3, 13, 3, 6, 7, 3, 12, 9, 5, 9, 8, 13, 7, 10, 13, 8, 1, 10, 12, 7, 2, 6, 6, 2, 11, 1, 8, 3, 10, 8, 12, 3, 6, 12, 6, 8, 4, 5, 9, 6, 6, 4, 4, 10, 5, 1, 5, 6, 4, 13, 2, 11, 3, 5, 9, 5, 2, 4, 5, 9, 4, 7, 3, 10, 8, 9, 5, 11, 13, 11, 9, 1, 12, 12, 2, 9, 8, 6, 13, 5, 10, 5, 3, 5, 4, 2, 11, 2, 13, 10, 11, 1, 4, 6, 8, 11, 12, 1, 8, 2, 3, 4, 10, 5, 5, 8, 9, 11, 3, 2, 1, 10, 6, 10, 6, 11, 8, 4, 13, 9, 3, 13, 13, 2, 1, 8, 4, 12, 8, 2, 9, 2, 4, 7, 6, 6, 11, 1, 12, 5, 7, 5, 2, 12, 9, 13, 8, 10, 5, 12, 11, 4, 8, 13, 8, 3, 11, 9, 4, 6, 10, 6, 5, 10, 4, 6, 12, 3, 13, 9, 1, 10, 3, 7, 13, 8, 12, 4, 5, 13, 4, 5, 6, 8, 10, 4, 4, 6, 9, 11, 1, 8, 12, 2, 10, 5, 12, 4, 6, 3, 9, 13, 2, 8, 2, 6, 12, 9, 4, 7, 13, 1, 7, 6, 12, 4, 2, 1, 5, 10, 7, 3, 10, 7, 8, 3, 6, 11, 4, 10, 4, 8, 1, 7, 13, 13, 5, 2, 8, 9, 10, 3, 8, 4, 6, 11, 5, 7, 12, 8, 12, 3, 6, 2, 7, 3, 5, 11, 4, 10, 3, 12, 11, 2, 1, 7, 6, 1, 13, 3, 4, 5, 13, 3, 5, 10, 7, 10, 1, 7, 11, 6, 11, 11, 3, 13, 4, 12, 1, 1, 3, 8, 1, 4, 3, 10, 2, 12, 8, 3, 3, 2, 7, 6, 1, 11, 8, 6, 2, 6, 2, 11, 9, 7, 6, 8, 8, 8, 9, 4, 11, 9, 7, 6, 5, 3, 2, 10, 7, 10, 3, 4, 7, 12, 8, 12, 11, 7, 3, 6, 4, 6, 1, 9, 3, 5, 13, 5, 4, 3, 12, 6, 12, 6, 2, 10, 2, 10, 5, 7, 13, 3, 5, 6, 7, 13, 4, 13, 8, 12, 6, 7, 11, 13, 3, 11, 10, 7, 1, 6, 8, 2, 8, 11, 11, 6, 11, 8, 10, 13, 1, 11, 6, 10, 6, 4, 8, 5, 8, 1, 11, 6, 3, 2, 4, 5, 11, 4, 2, 7, 5, 9, 1, 8, 3, 1, 6, 6, 3, 3, 1, 13, 1, 5, 13, 8, 6, 13, 5, 7, 11, 11, 8, 6, 2, 12, 5, 11, 1, 3, 9, 10, 9, 11, 8, 11, 6, 9, 5, 3, 7, 9, 5, 11, 11, 1, 5, 2, 7, 3, 13, 9, 7, 6, 8, 2, 6, 3, 13, 3, 13, 10, 4, 4, 8, 13, 1, 2, 4, 8, 10, 13, 8, 7, 4, 2, 7, 2, 5, 13, 1, 4, 6, 8, 2, 10, 4, 12, 8, 2, 8, 1, 6, 1, 13, 11, 3, 8, 4, 12, 1, 6, 2, 5, 4, 3, 12, 3, 10, 9, 11, 11, 9, 3, 1, 8, 6, 5, 9, 13, 8, 7, 5, 4, 11, 1, 11, 5, 12, 6, 10, 13, 2, 10, 10, 9, 7, 6, 4, 7, 8, 5, 3, 1, 6, 11, 8, 10, 7]
# y2 = [7, 2, 13, 7, 9, 1, 8, 6, 6, 10, 13, 1, 6, 2, 5, 1, 10, 12, 5, 13, 7, 4, 10, 3, 1, 5, 1, 4, 7, 5, 12, 9, 4, 2, 10, 8, 2, 10, 3, 13, 8, 2, 6, 7, 13, 6, 4, 2, 3, 4, 10, 10, 1, 6, 11, 2, 12, 2, 3, 4, 8, 9, 12, 10, 12, 13, 3, 10, 8, 2, 4, 4, 12, 10, 12, 9, 9, 4, 3, 6, 9, 2, 2, 7, 2, 13, 6, 12, 3, 7, 1, 12, 4, 2, 6, 1, 5, 5, 1, 1, 13, 11, 8, 6, 9, 4, 1, 12, 12, 1, 9, 12, 13, 4, 9, 8, 3, 5, 13, 5, 10, 1, 11, 9, 13, 1, 5, 12, 10, 3, 8, 11, 13, 3, 1, 9, 8, 9, 2, 8, 9, 2, 5, 6, 5, 3, 10, 5, 3, 3, 5, 12, 7, 11, 10, 5, 7, 13, 3, 13, 7, 12, 2, 9, 5, 9, 5, 7, 12, 7, 1, 9, 10, 4, 12, 12, 1, 13, 8, 6, 3, 5, 10, 6, 6, 7, 4, 3, 3, 8, 11, 7, 5, 6, 1, 5, 2, 11, 11, 7, 7, 2, 3, 2, 5, 11, 8, 10, 5, 5, 6, 2, 6, 2, 5, 11, 7, 11, 13, 11, 5, 1, 13, 7, 7, 2, 9, 2, 8, 2, 4, 6, 11, 13, 1, 12, 11, 9, 1, 4, 6, 4, 11, 13, 12, 13, 3, 12, 2, 13, 9, 3, 12, 4, 6, 9, 8, 6, 13, 1, 6, 10, 1, 6, 3, 8, 4, 10, 8, 9, 13, 10, 5, 6, 1, 5, 6, 3, 9, 12, 13, 4, 10, 3, 3, 2, 5, 12, 4, 6, 9, 13, 1, 9, 2, 10, 5, 8, 3, 7, 13, 9, 11, 3, 11, 1, 3, 9, 2, 11, 11, 2, 10, 8, 11, 4, 10, 1, 3, 10, 6, 2, 11, 9, 8, 13, 4, 9, 12, 3, 8, 8, 10, 13, 6, 6, 9, 5, 9, 1, 10, 9, 6, 7, 12, 5, 6, 2, 1, 9, 13, 8, 12, 7, 13, 9, 9, 1, 5, 11, 12, 2, 10, 8, 3, 7, 12, 12, 9, 1, 5, 9, 5, 9, 10, 2, 9, 9, 2, 5, 8, 12, 1, 4, 5, 8, 11, 7, 9, 8, 10, 7, 10, 6, 8, 10, 9, 9, 9, 9, 7, 11, 9, 10, 9, 12, 10, 10, 11, 9, 11, 9, 13, 2, 9, 9, 8, 8, 3, 11, 13, 5, 5, 11, 6, 7, 9, 10, 3, 9, 4, 6, 1, 6, 12, 2, 12, 1, 7, 5, 7, 13, 8, 12, 13, 1, 4, 12, 9, 1, 7, 1, 3, 9, 6, 6, 7, 1, 5, 5, 10, 9, 13, 2, 13, 1, 1, 3, 12, 12, 12, 7, 12, 10, 11, 3, 7, 1, 13, 2, 12, 6, 7, 1, 6, 2, 11, 5, 8, 3, 10, 8, 10, 1, 1, 2, 5, 2, 11, 3, 5, 13, 6, 1, 2, 13, 9, 11, 8, 6, 8, 9, 4, 11, 10, 3, 8, 6, 11, 10, 9, 13, 8, 10, 1, 3, 5, 2, 12, 8, 6, 12, 7, 1, 8, 13, 7, 10, 12, 1, 4, 4, 5, 5, 9, 4, 11, 12, 13, 13, 9, 10, 2, 11, 13, 5, 6, 5, 8, 6, 1, 10, 6, 11, 1, 6, 8, 4, 13, 10, 9, 11, 13, 2, 12, 4, 12, 8, 4, 9, 6, 13, 3, 13, 4, 1, 1, 8, 2, 4, 4, 12, 3, 8, 11, 12, 13, 9, 13, 11, 13, 1, 9, 12, 4, 10, 2, 8, 6, 4, 12, 4, 12, 5, 10, 3, 5, 5, 11, 10, 12, 9, 8, 1, 1, 4, 9, 3, 7, 2, 8, 10, 11, 1, 2, 2, 10, 7, 5, 6, 9, 2, 11, 6, 7, 2, 10, 4, 4, 12, 2, 11, 11, 11, 3, 12, 11, 11, 13, 2, 11, 4, 12, 13, 5, 1, 3, 8, 10, 12, 13, 13, 3, 10, 5, 7, 12, 10, 3, 9, 8, 5, 10, 11, 10, 5, 6, 12, 13, 4, 7, 11, 1, 4, 7, 2, 8, 12, 3, 6, 12, 1, 1, 13, 2, 13, 9, 3, 5, 4, 3, 9, 4, 3, 13, 12, 10, 5, 7, 11, 7, 2, 9, 2, 12, 4, 5, 1, 4, 3, 3, 5, 13, 5, 13, 5, 10, 10, 10, 3, 8, 3, 9, 1, 12, 6, 6, 12, 8, 9, 2, 10, 2, 8, 6, 13, 3, 7, 9, 3, 10, 5, 1, 7, 1, 9, 6, 6, 3, 10, 3, 1, 9, 11, 13, 7, 6, 10, 13, 7, 1, 9, 7, 3, 13, 2, 9, 2, 3, 10, 2, 6, 9, 13, 8, 5, 13, 11, 10, 5, 13, 1, 9, 8, 7, 9, 9, 8, 4, 1, 2, 8, 9, 13, 9, 9, 2, 8, 12, 8, 3, 7, 6, 11, 5, 12, 11, 6, 3, 7, 1, 8, 13, 9, 10, 9, 1, 7, 12, 2, 9, 12, 4, 6, 2, 1, 7, 10, 5, 2, 4, 11, 12, 6, 1, 4, 9, 2, 5, 5, 4, 11, 13, 2, 12, 4, 1, 6, 7, 9, 7, 7, 11, 2, 5, 2, 9, 10, 5, 10, 10, 2, 7, 2, 7, 6, 3, 8, 9, 12, 10, 9, 8, 10, 3, 9, 7, 11, 6, 6, 3, 2, 4, 1, 8, 6, 11, 2, 3, 1, 11, 3, 3, 4, 5, 11, 4, 12, 8, 13, 5, 11, 2, 6, 5, 9, 3, 10, 12, 11, 11, 10, 8, 11, 13, 1, 4, 10, 2, 9, 7, 8, 1, 12, 12, 11, 8, 9, 9, 9, 7, 12, 5, 12, 7, 9, 3, 12, 10, 11, 4, 7, 6, 5, 11, 9, 9, 12, 10, 7, 2, 2, 10, 9, 12, 1, 10, 4, 9, 9, 12, 4, 12, 4, 12, 6, 11, 9, 7, 6, 11, 11, 7, 10, 5, 4, 1, 12, 10, 2, 6, 8, 9, 9, 7, 8, 13, 4, 9, 9, 3, 9, 11, 3, 6, 12, 5, 6, 6, 1, 13, 2, 1, 11, 7, 13, 9, 10, 8, 12, 11, 5, 1, 11, 7, 10, 2, 3, 10, 4, 2, 7, 6, 11, 4, 4, 12, 4, 12, 1, 8, 12, 5, 8, 6, 3, 1, 8, 1, 4, 8, 5, 6, 2, 11, 13, 2, 3, 10, 6, 7, 3, 13, 2, 12, 7, 1, 9, 6, 12, 2, 1, 7, 2, 9, 10, 7, 2, 8, 5, 9, 6, 9, 8, 11, 11, 7, 5, 7, 9, 6, 6, 2, 7, 10, 10, 7, 12, 4, 2, 12, 1, 7, 7, 4, 6, 10, 6, 13, 12, 3, 5, 13, 1, 8, 7, 3, 4, 1, 9, 11, 8, 9, 12, 12, 7, 11, 5, 8, 10, 1, 12, 10, 12, 13, 13, 12, 10, 4, 13, 8, 1, 11, 2, 5, 3, 13, 2, 3, 10, 4, 8, 5, 11, 7, 10, 9, 10, 2, 6, 12, 3, 6, 12, 2, 7, 3, 9, 11, 11, 4, 4, 5, 9, 10, 12, 11, 4, 4, 8, 3, 10, 12, 11, 11, 12, 12, 4, 6, 1, 2, 11, 5, 7, 5, 4, 8, 2, 11, 13, 2, 9, 11, 5, 13, 4, 8, 12, 6, 6, 10, 7, 7, 11, 5, 13, 3, 13, 10, 11, 2, 1, 8, 5, 13, 6, 3, 6, 3, 7, 8, 12, 10, 13, 10, 10, 8, 2, 4, 4, 4, 3, 7, 13, 13, 9, 4, 2, 5, 6, 2, 1, 3, 10, 11, 11, 13, 6, 1, 4, 12, 8, 12, 5, 2, 9, 9, 12, 8, 5, 9, 6, 3, 7, 11, 8, 9, 5, 9, 6, 5, 11, 1, 7, 1, 10, 5, 13, 7, 2, 2, 3, 7, 2, 13, 6, 10, 12, 8, 11, 6, 12, 3, 7, 3, 13, 9, 3, 5, 2, 7, 10, 10, 6, 9, 3, 8, 3, 13, 8, 12, 3, 9, 11, 2, 12, 8, 9, 10, 3, 6, 13, 10, 3, 5, 11, 4, 2, 9, 5, 2, 5, 10, 12, 13, 1, 1, 8, 6, 3, 9, 13, 2, 10, 3, 4, 10, 12, 9, 10, 8, 1, 7, 9, 5, 6, 13, 10, 9, 13, 5, 5, 12, 11, 4, 5, 12, 13, 1, 3, 10, 9, 7, 4, 3, 9, 12, 4, 6, 4, 8, 6, 3, 8, 5, 4, 3, 13, 7, 1, 8, 10, 4, 1, 10, 6, 12, 7, 3, 4, 6, 10, 2, 13, 3, 3, 7, 1, 11, 9, 13, 11, 3, 12, 12, 11, 4, 7, 2, 1, 11, 9, 3, 11, 9, 8, 8, 13, 10, 7, 1, 6, 6, 12, 3, 9, 5, 4, 7, 3, 5, 6, 3, 9, 2, 5, 3, 10, 12, 7, 12, 4, 2, 10, 9, 1, 5, 10, 11, 4, 8, 2, 10, 7, 8, 6, 8, 6, 6, 6, 9, 6, 8, 3, 4, 7, 8, 5, 12, 8, 7, 8, 11, 10, 7, 8, 12, 10, 8, 2, 8, 2, 12, 6, 3, 1, 4, 3, 8, 7, 5, 13, 1, 3, 2, 9, 1, 4, 1, 5, 9, 12, 3, 10, 6, 12, 1, 13, 9, 9, 8, 8, 3, 10, 9, 5, 12, 9, 9, 10, 7, 6, 8, 2, 1, 9, 1, 12, 5, 1, 11, 6, 5, 12, 13, 9, 9, 2, 12, 13, 1, 12, 10, 7, 10, 13, 6, 10, 7, 10, 5, 9, 2, 3, 9, 7, 3, 5, 1, 6, 6, 4, 6, 1, 2, 4, 13, 2, 4, 4, 6, 10, 9, 7, 12, 7, 2, 8, 9, 7, 8, 5, 6, 10, 10, 1, 6, 3, 3, 6, 9, 1, 4, 2, 5, 1, 13, 3, 11, 10, 10, 4, 12, 3, 12, 12, 10, 13, 8, 9, 1, 12, 4, 8, 7, 8, 12, 6, 9, 2, 9, 11, 12, 13, 1, 12, 2, 4, 5, 2, 11, 6, 1, 2, 9, 7, 12, 9, 11, 5, 11, 11, 12, 8, 3, 5, 4, 5, 9, 2, 9, 6, 2, 1, 12, 9, 4, 10, 13, 4, 13, 13, 12, 5, 4, 5, 1, 13, 2, 4, 9, 9, 11, 6, 11, 5, 1, 10, 8, 4, 11, 7, 13, 2, 2, 5, 6, 8, 7, 12, 11, 3, 3, 5, 1, 12, 3, 13, 12, 4, 5, 1, 11, 4, 5, 5, 13, 2, 13, 5, 10, 11, 3, 6, 13, 5, 10, 12, 13, 13, 4, 2, 6, 11, 2, 1, 4, 8, 8, 2, 7, 5, 11, 9, 5, 10, 9, 13, 13, 4, 7, 5, 8, 5, 12, 3, 11, 1, 1, 7, 13, 11, 8, 3, 2, 5, 3, 12, 8, 9, 8, 10, 5, 13, 12, 13, 13, 12, 9, 12, 1, 8, 3, 13, 3, 6, 7, 2, 12, 9, 5, 9, 8, 13, 7, 10, 1, 8, 1, 10, 12, 7, 2, 10, 6, 2, 11, 1, 8, 3, 7, 8, 12, 3, 6, 12, 6, 11, 4, 5, 9, 6, 6, 4, 4, 10, 5, 1, 5, 6, 4, 13, 2, 11, 3, 5, 9, 5, 2, 4, 5, 9, 4, 7, 3, 10, 8, 9, 5, 11, 13, 11, 9, 1, 12, 12, 10, 9, 8, 6, 8, 5, 10, 5, 3, 13, 9, 2, 11, 2, 13, 10, 11, 1, 4, 1, 8, 11, 12, 2, 10, 2, 6, 4, 1, 6, 5, 8, 9, 11, 3, 2, 1, 10, 2, 10, 2, 11, 2, 4, 13, 9, 3, 13, 13, 12, 8, 4, 4, 12, 8, 2, 9, 9, 4, 7, 6, 6, 11, 1, 12, 5, 7, 5, 2, 12, 9, 13, 8, 10, 5, 12, 9, 4, 8, 13, 8, 5, 11, 9, 4, 6, 10, 6, 12, 10, 4, 13, 12, 3, 13, 9, 1, 10, 3, 7, 13, 4, 12, 4, 5, 13, 4, 5, 6, 10, 10, 4, 9, 6, 9, 11, 1, 9, 12, 2, 10, 11, 12, 4, 6, 3, 9, 13, 2, 8, 2, 6, 12, 9, 4, 7, 13, 9, 7, 6, 12, 4, 2, 1, 5, 10, 7, 3, 10, 7, 8, 3, 6, 11, 4, 10, 4, 8, 6, 7, 13, 13, 5, 2, 8, 9, 1, 3, 8, 5, 6, 11, 5, 7, 12, 8, 12, 3, 6, 4, 7, 3, 5, 11, 4, 10, 3, 12, 7, 2, 1, 7, 6, 3, 13, 3, 4, 5, 13, 3, 5, 10, 7, 10, 1, 7, 11, 6, 10, 11, 3, 13, 4, 12, 1, 1, 3, 8, 3, 4, 3, 10, 2, 12, 1, 3, 5, 2, 7, 6, 1, 11, 8, 1, 2, 6, 2, 1, 9, 7, 2, 8, 8, 8, 9, 4, 3, 9, 7, 6, 5, 3, 2, 10, 4, 10, 3, 3, 7, 12, 8, 2, 11, 7, 3, 6, 4, 9, 1, 9, 3, 5, 13, 5, 4, 3, 12, 6, 12, 6, 2, 10, 2, 10, 5, 7, 13, 3, 5, 6, 7, 13, 4, 13, 8, 12, 6, 7, 11, 13, 3, 11, 10, 7, 1, 6, 8, 2, 8, 11, 11, 5, 11, 8, 10, 13, 1, 6, 6, 10, 6, 5, 8, 5, 8, 1, 10, 6, 3, 2, 4, 5, 11, 4, 2, 7, 5, 9, 1, 8, 3, 1, 6, 6, 3, 7, 11, 13, 1, 5, 13, 8, 6, 13, 5, 7, 11, 11, 8, 6, 2, 13, 5, 11, 1, 3, 9, 10, 9, 11, 8, 11, 6, 9, 5, 3, 7, 9, 12, 11, 12, 13, 5, 2, 7, 3, 13, 13, 7, 6, 8, 10, 6, 4, 13, 12, 12, 1, 4, 4, 8, 13, 1, 2, 4, 8, 10, 13, 8, 7, 4, 2, 6, 2, 5, 13, 1, 4, 6, 2, 2, 10, 4, 12, 8, 2, 8, 1, 6, 1, 2, 11, 3, 8, 4, 12, 1, 6, 2, 5, 4, 3, 12, 3, 10, 9, 9, 11, 9, 3, 9, 12, 8, 5, 9, 9, 8, 7, 5, 4, 11, 1, 11, 5, 12, 6, 10, 13, 2, 10, 10, 9, 7, 6, 5, 7, 8, 5, 3, 1, 6, 11, 8, 10, 7]
# y3 = [7, 2, 13, 7, 9, 1, 10, 6, 6, 10, 7, 6, 1, 2, 5, 1, 10, 12, 5, 13, 7, 4, 10, 3, 1, 5, 1, 4, 13, 5, 12, 9, 4, 2, 5, 8, 2, 10, 3, 6, 7, 2, 6, 4, 13, 12, 4, 4, 3, 4, 8, 10, 1, 6, 11, 2, 4, 2, 3, 4, 8, 9, 12, 10, 12, 13, 3, 10, 8, 2, 4, 4, 12, 7, 12, 9, 7, 4, 8, 6, 9, 2, 2, 7, 2, 7, 6, 12, 3, 7, 1, 12, 4, 2, 6, 1, 5, 5, 1, 1, 13, 11, 8, 6, 9, 4, 1, 12, 12, 1, 9, 12, 13, 4, 9, 2, 11, 13, 13, 5, 10, 1, 11, 9, 13, 2, 1, 12, 10, 3, 8, 12, 13, 1, 1, 9, 8, 8, 2, 8, 9, 6, 5, 6, 5, 3, 6, 5, 3, 1, 5, 12, 5, 11, 10, 3, 13, 5, 3, 13, 7, 12, 2, 9, 9, 2, 4, 7, 12, 7, 1, 9, 10, 4, 12, 12, 1, 13, 9, 6, 3, 5, 10, 6, 6, 7, 4, 2, 3, 8, 11, 3, 5, 6, 1, 5, 2, 11, 11, 7, 7, 2, 3, 2, 5, 11, 8, 10, 5, 5, 5, 2, 6, 2, 5, 11, 7, 10, 13, 11, 5, 1, 13, 7, 3, 2, 9, 2, 6, 2, 4, 7, 11, 13, 1, 8, 11, 9, 1, 9, 6, 4, 11, 13, 1, 13, 3, 12, 12, 13, 9, 2, 1, 4, 6, 9, 11, 6, 13, 1, 6, 3, 10, 6, 6, 8, 4, 10, 8, 13, 13, 10, 5, 6, 4, 5, 6, 3, 9, 12, 13, 4, 10, 3, 4, 2, 5, 12, 4, 6, 9, 13, 1, 9, 2, 10, 5, 8, 3, 7, 13, 9, 11, 3, 11, 1, 4, 9, 2, 11, 11, 2, 10, 8, 1, 2, 10, 1, 3, 10, 6, 2, 11, 9, 8, 13, 4, 9, 12, 3, 8, 8, 10, 3, 6, 6, 9, 5, 9, 1, 10, 9, 6, 11, 12, 5, 6, 2, 1, 5, 13, 8, 4, 7, 13, 9, 9, 1, 3, 11, 12, 2, 10, 8, 3, 7, 12, 12, 9, 1, 5, 1, 5, 9, 10, 2, 9, 9, 2, 8, 8, 12, 1, 8, 5, 8, 11, 7, 9, 8, 10, 7, 13, 6, 8, 10, 9, 9, 13, 9, 7, 11, 9, 10, 9, 3, 10, 10, 12, 9, 13, 9, 13, 2, 9, 13, 8, 4, 3, 11, 13, 8, 5, 11, 6, 7, 3, 10, 3, 9, 4, 3, 1, 6, 12, 2, 12, 1, 7, 6, 10, 13, 8, 12, 13, 1, 4, 12, 9, 1, 7, 1, 3, 9, 6, 6, 7, 1, 5, 3, 10, 9, 13, 7, 9, 1, 1, 3, 5, 12, 4, 10, 12, 7, 11, 3, 7, 1, 13, 2, 12, 6, 7, 3, 6, 2, 11, 10, 8, 3, 10, 13, 13, 1, 1, 2, 5, 12, 11, 3, 5, 13, 6, 3, 2, 13, 9, 11, 8, 6, 8, 9, 2, 11, 10, 3, 8, 6, 11, 10, 6, 13, 8, 9, 4, 3, 5, 9, 12, 8, 6, 12, 7, 1, 12, 13, 7, 10, 12, 1, 4, 4, 5, 5, 9, 4, 11, 12, 9, 13, 9, 10, 2, 11, 13, 5, 6, 9, 8, 6, 1, 9, 6, 11, 1, 6, 8, 5, 1, 5, 9, 11, 13, 2, 12, 4, 12, 8, 4, 9, 6, 13, 3, 13, 4, 5, 1, 8, 2, 4, 4, 12, 3, 8, 11, 12, 13, 6, 13, 11, 13, 8, 9, 12, 4, 10, 2, 8, 6, 4, 1, 4, 12, 5, 10, 3, 5, 5, 11, 10, 12, 9, 5, 1, 1, 4, 9, 3, 7, 2, 8, 10, 11, 1, 2, 2, 7, 11, 13, 6, 9, 2, 11, 13, 3, 2, 10, 3, 4, 12, 2, 11, 11, 11, 3, 12, 11, 11, 13, 2, 11, 4, 12, 13, 5, 1, 3, 8, 10, 4, 13, 4, 10, 10, 4, 3, 12, 10, 11, 9, 8, 5, 10, 11, 10, 5, 6, 12, 6, 4, 7, 11, 1, 4, 7, 2, 8, 12, 1, 4, 12, 1, 1, 13, 2, 2, 9, 1, 5, 4, 3, 9, 4, 3, 13, 12, 10, 5, 8, 11, 7, 10, 9, 2, 12, 5, 5, 1, 10, 3, 3, 9, 13, 9, 13, 5, 10, 4, 12, 3, 8, 3, 9, 1, 12, 6, 6, 12, 8, 9, 2, 10, 2, 8, 6, 11, 3, 7, 13, 3, 10, 5, 11, 7, 1, 9, 6, 6, 3, 10, 3, 1, 9, 11, 13, 7, 6, 10, 13, 7, 4, 9, 7, 7, 13, 2, 9, 2, 3, 10, 2, 5, 9, 13, 8, 5, 8, 11, 10, 5, 13, 6, 7, 8, 9, 9, 9, 8, 4, 1, 2, 8, 9, 13, 9, 9, 1, 8, 12, 8, 3, 7, 6, 11, 1, 12, 11, 6, 3, 7, 1, 8, 13, 1, 10, 9, 1, 4, 12, 2, 9, 12, 4, 6, 2, 1, 7, 10, 5, 2, 4, 11, 12, 6, 1, 4, 9, 2, 5, 5, 4, 11, 13, 2, 12, 4, 1, 7, 7, 9, 7, 9, 11, 2, 10, 2, 9, 10, 5, 10, 10, 2, 7, 2, 7, 6, 3, 11, 9, 12, 10, 9, 8, 3, 3, 9, 13, 11, 6, 6, 3, 2, 4, 1, 8, 6, 11, 2, 3, 10, 11, 3, 3, 4, 5, 11, 4, 12, 8, 13, 5, 11, 2, 6, 5, 9, 3, 10, 12, 11, 11, 10, 8, 4, 13, 2, 4, 10, 3, 9, 7, 8, 1, 12, 12, 11, 8, 9, 9, 9, 7, 12, 5, 12, 7, 9, 3, 12, 10, 8, 4, 7, 6, 5, 11, 9, 9, 12, 10, 12, 2, 2, 10, 9, 12, 1, 10, 4, 9, 9, 12, 3, 12, 4, 12, 6, 11, 9, 7, 6, 11, 11, 7, 10, 5, 4, 1, 12, 10, 2, 6, 8, 9, 9, 7, 8, 13, 6, 9, 9, 3, 9, 11, 8, 6, 12, 5, 7, 6, 9, 11, 2, 1, 11, 7, 2, 9, 13, 8, 12, 11, 5, 1, 12, 7, 10, 2, 3, 10, 4, 2, 11, 6, 11, 4, 4, 12, 4, 12, 1, 3, 5, 5, 8, 6, 9, 1, 8, 1, 4, 8, 5, 9, 2, 11, 13, 2, 5, 10, 6, 7, 3, 13, 2, 12, 11, 1, 6, 9, 12, 2, 1, 7, 2, 9, 4, 7, 2, 2, 5, 9, 1, 9, 8, 11, 11, 7, 5, 7, 5, 6, 6, 2, 7, 10, 2, 7, 12, 4, 2, 12, 1, 7, 12, 4, 6, 10, 6, 13, 12, 3, 5, 13, 1, 8, 7, 3, 4, 1, 9, 11, 8, 9, 12, 12, 7, 11, 5, 4, 10, 3, 12, 10, 13, 13, 13, 2, 10, 4, 13, 8, 1, 5, 2, 3, 6, 13, 2, 3, 10, 4, 8, 5, 11, 7, 10, 7, 10, 2, 6, 12, 3, 6, 12, 2, 7, 3, 9, 11, 11, 4, 4, 5, 9, 10, 12, 4, 10, 4, 8, 3, 10, 12, 11, 11, 12, 11, 3, 6, 1, 2, 11, 5, 7, 5, 4, 8, 2, 11, 2, 2, 9, 11, 5, 13, 4, 8, 13, 6, 6, 10, 7, 7, 11, 5, 13, 3, 13, 10, 9, 2, 1, 8, 5, 13, 6, 3, 6, 3, 4, 8, 12, 10, 13, 10, 10, 11, 2, 4, 4, 4, 3, 7, 13, 2, 9, 8, 2, 5, 6, 2, 9, 3, 3, 11, 11, 13, 11, 1, 4, 12, 8, 12, 3, 2, 9, 9, 12, 8, 5, 9, 6, 3, 10, 11, 8, 9, 3, 9, 6, 5, 11, 1, 8, 1, 10, 5, 10, 5, 2, 2, 8, 7, 2, 13, 6, 12, 12, 8, 11, 6, 12, 3, 7, 3, 13, 9, 3, 5, 2, 7, 10, 10, 6, 9, 3, 8, 3, 13, 8, 12, 3, 9, 11, 2, 12, 3, 9, 10, 3, 6, 13, 10, 3, 5, 11, 4, 11, 12, 5, 2, 5, 1, 12, 2, 1, 11, 8, 6, 3, 9, 13, 2, 10, 3, 4, 10, 12, 9, 10, 8, 1, 7, 9, 6, 13, 13, 10, 9, 5, 5, 5, 12, 11, 6, 5, 12, 13, 7, 3, 10, 9, 7, 4, 3, 9, 12, 7, 1, 4, 8, 5, 3, 8, 9, 4, 3, 13, 7, 1, 8, 1, 4, 1, 10, 9, 12, 7, 3, 4, 6, 10, 2, 13, 3, 3, 7, 1, 11, 9, 13, 8, 10, 12, 12, 11, 4, 7, 2, 1, 11, 11, 6, 11, 6, 8, 8, 13, 10, 7, 1, 10, 6, 12, 3, 9, 5, 11, 7, 3, 5, 6, 10, 9, 7, 5, 3, 10, 5, 1, 12, 4, 2, 10, 5, 1, 8, 10, 11, 4, 8, 2, 10, 7, 8, 6, 8, 6, 6, 6, 9, 6, 1, 3, 2, 6, 10, 5, 12, 1, 7, 8, 11, 3, 7, 8, 12, 4, 8, 2, 11, 2, 13, 11, 3, 1, 4, 3, 8, 7, 5, 13, 1, 3, 2, 9, 12, 4, 1, 5, 9, 12, 3, 10, 6, 12, 1, 13, 9, 9, 4, 8, 3, 1, 9, 5, 12, 9, 9, 10, 7, 6, 8, 2, 1, 9, 4, 12, 5, 1, 13, 6, 5, 8, 13, 9, 9, 2, 10, 13, 1, 12, 10, 7, 10, 13, 6, 10, 8, 10, 5, 9, 2, 3, 9, 7, 3, 11, 6, 6, 6, 4, 9, 1, 2, 4, 13, 10, 4, 4, 6, 10, 9, 13, 5, 7, 5, 8, 9, 7, 8, 5, 6, 3, 10, 1, 6, 7, 3, 6, 9, 1, 4, 2, 1, 1, 13, 3, 11, 5, 10, 4, 12, 3, 12, 12, 6, 13, 8, 9, 13, 12, 4, 8, 5, 8, 12, 6, 9, 2, 9, 11, 12, 13, 1, 12, 2, 4, 5, 2, 11, 6, 1, 2, 9, 7, 12, 9, 11, 5, 11, 11, 12, 13, 3, 5, 4, 5, 9, 7, 9, 6, 2, 1, 12, 9, 4, 13, 13, 4, 13, 13, 12, 5, 4, 5, 1, 13, 2, 4, 9, 7, 1, 5, 11, 5, 1, 10, 8, 4, 2, 7, 13, 2, 2, 5, 6, 10, 7, 12, 11, 3, 3, 5, 1, 12, 3, 13, 6, 4, 5, 1, 11, 4, 5, 11, 4, 2, 13, 5, 10, 11, 3, 6, 13, 11, 10, 12, 13, 5, 4, 2, 6, 11, 2, 1, 4, 8, 4, 2, 7, 5, 11, 9, 5, 10, 9, 13, 13, 4, 7, 5, 8, 5, 12, 3, 11, 1, 7, 7, 13, 5, 8, 3, 2, 5, 2, 12, 8, 9, 8, 10, 5, 13, 12, 13, 13, 12, 9, 12, 1, 8, 3, 13, 3, 6, 7, 3, 12, 7, 5, 9, 8, 13, 7, 10, 1, 8, 1, 10, 12, 7, 2, 6, 6, 2, 11, 1, 8, 3, 7, 8, 12, 3, 6, 12, 3, 8, 4, 5, 9, 6, 6, 4, 4, 10, 1, 1, 5, 6, 4, 13, 2, 11, 3, 5, 9, 5, 2, 1, 5, 9, 4, 7, 3, 7, 8, 9, 5, 11, 13, 11, 9, 1, 12, 12, 10, 9, 8, 6, 13, 5, 10, 5, 3, 13, 4, 2, 11, 2, 13, 10, 11, 1, 4, 6, 8, 11, 4, 2, 10, 2, 3, 4, 10, 5, 5, 8, 9, 4, 3, 2, 1, 10, 6, 10, 2, 11, 2, 4, 13, 9, 3, 13, 13, 12, 8, 8, 4, 12, 8, 2, 9, 9, 4, 7, 6, 6, 11, 1, 12, 5, 7, 5, 2, 12, 3, 13, 8, 10, 5, 12, 9, 4, 8, 13, 8, 5, 11, 9, 4, 6, 10, 6, 12, 10, 4, 6, 12, 3, 13, 9, 1, 10, 3, 7, 13, 4, 12, 4, 5, 13, 9, 5, 6, 8, 7, 4, 4, 6, 9, 11, 1, 9, 12, 2, 10, 11, 8, 4, 6, 3, 9, 13, 2, 8, 2, 6, 12, 9, 4, 7, 13, 9, 7, 6, 12, 4, 2, 5, 5, 10, 7, 3, 10, 7, 8, 3, 6, 8, 4, 10, 4, 11, 1, 7, 13, 13, 5, 2, 8, 9, 10, 3, 8, 5, 6, 11, 11, 7, 12, 8, 12, 3, 6, 4, 7, 3, 10, 1, 4, 10, 3, 12, 11, 2, 1, 7, 6, 1, 6, 1, 4, 5, 13, 3, 5, 10, 7, 3, 1, 7, 11, 6, 11, 11, 3, 13, 4, 12, 1, 12, 3, 8, 1, 4, 3, 10, 2, 12, 1, 11, 5, 2, 7, 6, 1, 11, 8, 1, 2, 6, 2, 11, 2, 7, 2, 8, 8, 8, 13, 4, 11, 9, 7, 6, 5, 3, 2, 10, 4, 10, 8, 4, 13, 12, 8, 2, 11, 7, 3, 6, 4, 9, 1, 9, 3, 5, 13, 5, 4, 3, 12, 6, 12, 6, 2, 13, 2, 10, 5, 7, 13, 3, 5, 6, 7, 13, 4, 13, 8, 11, 6, 7, 11, 13, 3, 11, 10, 7, 1, 6, 8, 2, 8, 11, 11, 5, 11, 8, 10, 13, 1, 11, 6, 10, 6, 4, 8, 5, 8, 1, 11, 6, 3, 2, 4, 5, 11, 4, 2, 7, 5, 9, 1, 8, 3, 1, 6, 7, 3, 3, 1, 13, 1, 5, 13, 8, 6, 13, 5, 7, 11, 11, 8, 6, 2, 13, 5, 11, 1, 3, 3, 10, 9, 11, 8, 11, 6, 9, 11, 3, 7, 9, 12, 11, 12, 13, 5, 2, 5, 3, 13, 13, 7, 6, 8, 10, 6, 4, 13, 12, 13, 1, 4, 4, 8, 13, 1, 2, 4, 8, 10, 2, 8, 1, 4, 2, 7, 2, 5, 13, 1, 4, 6, 8, 2, 10, 4, 12, 8, 2, 8, 1, 6, 1, 13, 11, 3, 8, 4, 12, 1, 6, 2, 5, 9, 3, 12, 3, 10, 9, 9, 11, 9, 3, 9, 8, 8, 5, 9, 9, 10, 5, 5, 4, 11, 1, 11, 5, 12, 6, 3, 13, 2, 10, 10, 9, 7, 6, 5, 8, 8, 5, 3, 1, 6, 11, 8, 10, 7]
# sol1 = Solution(data, y1)
# sol2 = Solution(data, y2)
# sol3 = Solution(data, y3)
# println("ll1 = ", sol1.ll)
# println("ll2 = ", sol2.ll)
# println("ll3 = ", sol3.ll)

# y = copy(label)
# m = compute_m(data, y)
# kappa = compute_kappa(data, y)
# sol = Solution(data, y)
# println("ll = ", sol.ll)

# omega = get_omega(m, kappa)
# omega_ii = diag(omega)
# omega_ij = omega - Diagonal(omega)
# println(omega_ii)
# for i=1:k
#     println(omega_ii[i], ", ", maximum(omega_ij[i,:]))
# end
# solveSBM(m, kappa, data)


